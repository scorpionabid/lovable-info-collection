
import { supabase } from '../../supabaseClient';
import { User, CreateUserDto, MultiUserCreationResult } from '../types';

export const createUser = async (userData: CreateUserDto) => {
  try {
    // Create a data object without id (will be generated by Supabase)
    const userDataForInsert = {
      email: userData.email,
      first_name: userData.first_name,
      last_name: userData.last_name,
      role_id: userData.role_id || '',
      region_id: userData.region_id,
      sector_id: userData.sector_id,
      school_id: userData.school_id,
      phone: userData.phone,
      utis_code: userData.utis_code,
      is_active: userData.is_active !== undefined ? userData.is_active : true,
      // Include id if it's provided
      ...(userData.id ? { id: userData.id } : {})
    };
    
    // Use type assertion to avoid TypeScript errors with insert operation
    const { data, error } = await supabase
      .from('users')
      .insert(userDataForInsert as any)
      .select(`
        *,
        roles (
          id,
          name,
          description,
          permissions
        )
      `)
      .single();
      
    if (error) throw error;
    
    if (userData.school_id && userData.role_id) {
      const { data: roleData } = await supabase
        .from('roles')
        .select('name')
        .eq('id', userData.role_id)
        .single();
        
      if (roleData?.name === 'school-admin') {
        console.log(`Ensuring user ${data.id} is properly linked as admin for school ${userData.school_id}`);
      }
    }
    
    return data as User;
  } catch (error) {
    console.error('Error creating user:', error);
    throw error;
  }
};

export const createUsers = async (users: Array<CreateUserDto>): Promise<MultiUserCreationResult> => {
  try {
    if (!users || users.length === 0) {
      return { data: [], error: new Error('No users provided') };
    }
    
    // Process each user individually to avoid bulk insert issues
    const results: User[] = [];
    const errors: { user: CreateUserDto; error: any }[] = [];
    
    for (const user of users) {
      try {
        // Ensure is_active is defined
        const userWithDefaults = {
          ...user,
          is_active: user.is_active !== undefined ? user.is_active : true
        };
        
        // Insert one record at a time using the createUser function
        const result = await createUser(userWithDefaults);
          
        if (result) {
          results.push(result);
        }
      } catch (err) {
        console.error(`Exception creating user ${user.email}:`, err);
        errors.push({ user, error: err });
      }
    }
    
    return { 
      data: results, 
      error: errors.length > 0 ? new Error(`${errors.length} users failed to create`) : null,
      errorDetails: errors
    };
  } catch (error) {
    console.error('Error creating users:', error);
    return { data: null, error };
  }
};
