
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { logger } from '@/utils/logger';

const SUPABASE_URL = "https://wxkaasjwpavlwrpvsuia.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind4a2Fhc2p3cGF2bHdycHZzdWlhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAzODA3NzAsImV4cCI6MjA1NTk1Njc3MH0.Sy0ktssGHAMNtU4kCrEKuFNf8Yf5R280uqwpsMcZpuM";

// Create the Supabase client with options
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Monitoring middleware for debugging Supabase operations
supabase.auth.onAuthStateChange((event, session) => {
  logger.info('Supabase auth event:', {event, isAuthenticated: !!session});
});

// Check connection health
export const checkConnection = async (): Promise<boolean> => {
  try {
    const start = Date.now();
    const { data, error } = await supabase.from('sectors').select('count').limit(1);
    const duration = Date.now() - start;
    
    if (error) {
      logger.error('Supabase connection check failed', { error, duration });
      return false;
    }
    
    logger.info('Supabase connection check successful', { duration });
    return true;
  } catch (err) {
    logger.error('Supabase connection exception', err);
    return false;
  }
};

// Configure retry logic
export const withRetry = async <T>(
  queryFn: () => Promise<T>, 
  maxRetries = 3, 
  initialRetryDelay = 500
): Promise<T> => {
  let retries = 0;
  let lastError: any;
  
  while (retries <= maxRetries) {
    try {
      if (retries > 0) {
        logger.info(`Retry attempt ${retries}/${maxRetries}`);
      }
      
      const result = await queryFn();
      
      if (retries > 0) {
        logger.info(`Retry successful after ${retries} attempts`);
      }
      
      return result;
    } catch (error) {
      lastError = error;
      
      // If this was the last retry, don't wait
      if (retries === maxRetries) {
        break;
      }
      
      retries++;
      
      // Calculate exponential backoff with jitter
      const delay = initialRetryDelay * Math.pow(2, retries - 1) * (0.5 + Math.random() * 0.5);
      
      logger.warn(`Query failed, retrying in ${Math.round(delay)}ms`, {
        error,
        attempt: retries,
        maxRetries
      });
      
      // Wait before next retry
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  logger.error(`Query failed after ${maxRetries} retry attempts`, lastError);
  throw lastError;
};
